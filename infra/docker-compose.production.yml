services:
  db:
    image: postgres:16-alpine
    container_name: postgres_prod
    env_file:
      - .env
    ports:
      - "5000:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 400M

  redis:
    image: redis:7-alpine
    container_name: redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: 100M

  fastapi:
    image: blathata/wrest_backend:latest
    container_name: fastapi_container
    env_file:
      - .env
    environment:
      - RUNNING_IN_DOCKER=true
      - PYTHONPATH=/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 300M

  celery:
    image: blathata/wrest_backend:latest
    container_name: celery_worker
    command: ["celery", "-A", "vk.celery_app.celery_app", "worker", "--loglevel=DEBUG", "--concurrency=1"]
    env_file:
      - .env
    environment:
      - RUNNING_IN_DOCKER=true
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      fastapi:
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 150M

  celery_beat:
    image: blathata/wrest_backend:latest
    container_name: celery_beat_container
    command: ["celery", "-A", "vk.celery_app.celery_app", "beat", "--loglevel=DEBUG"]
    env_file:
      - .env
    environment:
      - RUNNING_IN_DOCKER=true
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      fastapi:
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.05'
          memory: 100M

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
