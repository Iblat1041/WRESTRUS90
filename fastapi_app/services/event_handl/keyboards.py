import logging
from typing import List
from aiogram import types

from services.models import Event

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def build_event_list_keyboard(
    events: List[Event],
    current_page: int,
    total_pages: int
) -> types.InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π.

    Args:
        events: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–±—ã—Ç–∏–π.
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1).
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π, –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.

    Raises:
        ValueError: –ï—Å–ª–∏ current_page –∏–ª–∏ total_pages –∏–º–µ—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    if current_page < 1:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ current_page: {current_page}")
        raise ValueError("current_page –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1")
    if total_pages < 0:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ total_pages: {total_pages}")
        raise ValueError("total_pages –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 0")

    keyboard_rows = []

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è {len(events)} —Å–æ–±—ã—Ç–∏–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}")

    # –ö–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è —Å–æ–±—ã—Ç–∏–π (–ø–æ 2 –≤ —Ä—è–¥)
    if events:
        for i in range(0, len(events), 2):
            row = [
                types.InlineKeyboardButton(
                    text=f"–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç ‚Ññ {event.id}",
                    callback_data=f"/details_{event.id}"
                )
                for event in events[i:i+2]
            ]
            keyboard_rows.append(row)
    else:
        logger.warning("–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π '–í –º–µ–Ω—é'")

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 1:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"page_{current_page-1}"
        ))
    if current_page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"page_{current_page+1}"
        ))
    
    if nav_buttons:
        keyboard_rows.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard_rows.append([
        types.InlineKeyboardButton(
            text="üîô –í –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])

    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)