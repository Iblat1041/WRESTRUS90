import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InputMediaPhoto
from sqlalchemy import func, select
from sqlalchemy.orm import selectinload
from sqlalchemy.ext.asyncio import AsyncSession

from core.db import get_async_session
from event_handl.keyboards import build_event_list_keyboard
from bot.keyboards import get_main_menu_keyboard
from services.models import Event, User

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

event_router = Router()

class EventState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏"""
    START_EVENT = State()      # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
    DETAILS_EVENT = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è
    current_page = State()     # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_pages = State()      # –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    message_id = State()       # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    selected_event_id = State()# ID –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ —Å–æ–±—ã—Ç–∏—è

# region –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

@event_router.callback_query(F.data == 'competition')
async def handle_competitions(
    callback: types.CallbackQuery,
    state: FSMContext,
    ) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è'"""
    await state.set_state(EventState.START_EVENT)
    await show_event_list(callback, state, page=1)


@event_router.callback_query(F.data.startswith('page_'))
async def handle_pagination(
    callback: types.CallbackQuery,
    state: FSMContext,
    ) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    try:
        page = int(callback.data.split('_')[1])
        await show_event_list(callback, state, page)
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)


@event_router.callback_query(F.data.startswith('/details_'))
async def handle_details(
    callback: types.CallbackQuery,
    state: FSMContext,
    ) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è"""
    try:
        event_id = int(callback.data.split('_')[1])
        await state.set_state(EventState.DETAILS_EVENT)
        await show_event_details(callback, state, event_id)
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è.", show_alert=True)


@event_router.callback_query(F.data.startswith('back_to_list_'))
async def handle_back_to_list(
    callback: types.CallbackQuery,
    state: FSMContext,
    ) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π"""
    try:
        page = int(callback.data.split('_')[-1])
        await state.set_state(EventState.START_EVENT)
        await show_event_list(callback, state, page)
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É.", show_alert=True)


@event_router.callback_query(F.data == 'back_to_menu')
async def handle_back_to_menu(
    callback: types.CallbackQuery,
    state: FSMContext,
    ) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await return_to_main_menu(callback, state)

# endregion

# region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def show_event_list(
    callback: types.CallbackQuery,
    state: FSMContext,
    page: int,
    events_per_page: int = 5
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    async with get_async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            total_events = await get_total_events_count(session)
            if not total_events:
                await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π.", show_alert=True)
                return

            # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            total_pages = calculate_total_pages(total_events, events_per_page)
            page = normalize_page_number(page, total_pages)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            current_events = await get_events_for_page(
                session, page, events_per_page
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await send_event_list_message(
                callback, state, current_events, page, total_pages
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞: {e}", exc_info=True)
            await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)

async def show_event_details(
    callback: types.CallbackQuery,
    state: FSMContext,
    event_id: int
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è"""
    async with get_async_session() as session:
        try:
            event = await get_event_by_id(session, event_id)
            if not event:
                await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è
            await send_event_content(callback, event)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await save_event_view_state(state, event_id)
            await send_back_button(callback, state)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π: {e}", exc_info=True)
            await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)


async def return_to_main_menu(
        callback: types.CallbackQuery,
        state: FSMContext
        ):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    user = await get_user_by_telegram_id(callback.from_user.id)
    
    try:
        await callback.message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user.name if user else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            reply_markup=get_main_menu_keyboard(is_admin=bool(user and user.admin_role))
        )
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}")
    finally:
        await callback.answer()

# endregion

# region –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

async def get_total_events_count(session: AsyncSession) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    return await session.scalar(
        select(func.count(Event.id))
        .where(Event.category == 'competition')
        .where(Event.status == 'active')
    )


async def get_events_for_page(
    session: AsyncSession,
    page: int,
    per_page: int
) -> list[Event]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    result = await session.execute(
        select(Event)
        .where(Event.category == 'competition')
        .where(Event.status == 'active')
        .order_by(Event.published_at.desc())
        .offset((page-1)*per_page)
        .limit(per_page)
    )
    return result.scalars().all()


async def get_event_by_id(
        session: AsyncSession,
        event_id: int,
        ) -> Event | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ ID"""
    result = await session.execute(
        select(Event)
        .where(Event.id == event_id)
        .where(Event.status == 'active')
    )
    return result.scalars().first()


async def get_user_by_telegram_id(telegram_id: int) -> User | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    async with get_async_session() as session:
        result = await session.execute(
            select(User)
            .where(User.telegram_id == telegram_id)
            .options(selectinload(User.admin_role))
        )
        return result.scalar_one_or_none()

# endregion

# region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def calculate_total_pages(
        total_items: int,
        per_page: int,
        ) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    return max(1, (total_items + per_page - 1) // per_page)


def normalize_page_number(page: int, total_pages: int) -> int:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    return max(1, min(page, total_pages))


async def send_event_list_message(
    callback: types.CallbackQuery,
    state: FSMContext,
    events: list[Event],
    page: int,
    total_pages: int
):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n" +
        "\n".join(
            f"<b>{event.title}</b> - {event.published_at.strftime('%Y-%m-%d')}"
            for event in events
        )
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = build_event_list_keyboard(events, page, total_pages)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if page == 1:
            await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    msg = await callback.message.answer(
        message_text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        current_page=page,
        total_pages=total_pages,
        message_id=msg.message_id
    )


async def send_event_content(callback: types.CallbackQuery, event: Event):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è (—Ç–µ–∫—Å—Ç + –º–µ–¥–∏–∞)"""
    message_text = (
        f"<b>{event.title}</b>\n"
        f"{event.content}\n\n"
        f"–î–∞—Ç–∞: {event.published_at.strftime('%Y-%m-%d')}"
    )

    if event.images and isinstance(event.images, list) and event.images:
        try:
            await callback.message.answer_photo(
                photo=event.images[0],
                caption=message_text,
                parse_mode='HTML'
            )
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

    await callback.message.answer(message_text, parse_mode='HTML')


async def send_back_button(
        callback: types.CallbackQuery,
        state: FSMContext
        ):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É"""
    state_data = await state.get_data()
    current_page = state_data.get('current_page', 1)
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É",
            callback_data=f"back_to_list_{current_page}"
        )
    ]])
    
    await callback.message.answer(
        "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è",
        reply_markup=keyboard
    )

async def save_event_view_state(
        state: FSMContext,
        event_id: int
        ):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏—è"""
    await state.update_data(
        selected_event_id=event_id,
        viewing_mode='details'
    )

# endregion